module FAS(
       clk, 
       rst, 
       data_valid, 
       data, 
       fft_d0,fft_d1,fft_d2,fft_d3,fft_d4,fft_d5,fft_d6,fft_d7,
       fft_d8,fft_d9,fft_d10,fft_d11,fft_d12,fft_d13,fft_d14,fft_d15,
       fft_valid,
       done,
       freq
       );
       
input	clk;
input	rst;
input	data_valid;
input signed [15:0] data;

output reg [31:0] fft_d0,fft_d1,fft_d2,fft_d3,fft_d4,fft_d5,fft_d6,fft_d7, 
              fft_d8,fft_d9,fft_d10,fft_d11,fft_d12,fft_d13,fft_d14,fft_d15;              
output reg fft_valid;
output reg done;                      
output reg [3:0] freq;


wire[31:0] value_1[15:0];
wire[31:0] value_2[7:0];
wire[31:0] value_3[3:0];
wire[31:0] value_4[1:0];
wire[31:0] value_5;               //save value

wire[3:0] max_number_2[7:0];
wire[3:0] max_number_3[3:0];
wire[3:0] max_number_4[1:0];
wire[3:0] max_number_5;           //save max number

assign  value_1[0] = $signed( fft_d0[31:16]) * $signed( fft_d0[31:16]) + $signed( fft_d0[15:0]) * $signed( fft_d0[15:0]);
assign  value_1[1] = $signed( fft_d1[31:16]) * $signed( fft_d1[31:16]) + $signed( fft_d1[15:0]) * $signed( fft_d1[15:0]);
assign  value_1[2] = $signed( fft_d2[31:16]) * $signed( fft_d2[31:16]) + $signed( fft_d2[15:0]) * $signed( fft_d2[15:0]);
assign  value_1[3] = $signed( fft_d3[31:16]) * $signed( fft_d3[31:16]) + $signed( fft_d3[15:0]) * $signed( fft_d3[15:0]);
assign  value_1[4] = $signed( fft_d4[31:16]) * $signed( fft_d4[31:16]) + $signed( fft_d4[15:0]) * $signed( fft_d4[15:0]);
assign  value_1[5] = $signed( fft_d5[31:16]) * $signed( fft_d5[31:16]) + $signed( fft_d5[15:0]) * $signed( fft_d5[15:0]);
assign  value_1[6] = $signed( fft_d6[31:16]) * $signed( fft_d6[31:16]) + $signed( fft_d6[15:0]) * $signed( fft_d6[15:0]);
assign  value_1[7] = $signed( fft_d7[31:16]) * $signed( fft_d7[31:16]) + $signed( fft_d7[15:0]) * $signed( fft_d7[15:0]);
assign  value_1[8] = $signed( fft_d8[31:16]) * $signed( fft_d8[31:16]) + $signed( fft_d8[15:0]) * $signed( fft_d8[15:0]);
assign  value_1[9] = $signed( fft_d9[31:16]) * $signed( fft_d9[31:16]) + $signed( fft_d9[15:0]) * $signed( fft_d9[15:0]);
assign value_1[10] = $signed(fft_d10[31:16]) * $signed(fft_d10[31:16]) + $signed(fft_d10[15:0]) * $signed(fft_d10[15:0]);
assign value_1[11] = $signed(fft_d11[31:16]) * $signed(fft_d11[31:16]) + $signed(fft_d11[15:0]) * $signed(fft_d11[15:0]);
assign value_1[12] = $signed(fft_d12[31:16]) * $signed(fft_d12[31:16]) + $signed(fft_d12[15:0]) * $signed(fft_d12[15:0]);
assign value_1[13] = $signed(fft_d13[31:16]) * $signed(fft_d13[31:16]) + $signed(fft_d13[15:0]) * $signed(fft_d13[15:0]);
assign value_1[14] = $signed(fft_d14[31:16]) * $signed(fft_d14[31:16]) + $signed(fft_d14[15:0]) * $signed(fft_d14[15:0]);
assign value_1[15] = $signed(fft_d15[31:16]) * $signed(fft_d15[31:16]) + $signed(fft_d15[15:0]) * $signed(fft_d15[15:0]);       

assign      value_2[0] = ( value_1[0] >  value_1[1]) ?  value_1[0] :value_1[1];
assign max_number_2[0] = ( value_1[0] >  value_1[1]) ?          0  :        1 ;
assign      value_2[1] = ( value_1[2] >  value_1[3]) ?  value_1[2] :value_1[3];
assign max_number_2[1] = ( value_1[2] >  value_1[3]) ?          2  :        3 ;
assign      value_2[2] = ( value_1[4] >  value_1[5]) ?  value_1[4] :value_1[5];
assign max_number_2[2] = ( value_1[4] >  value_1[5]) ?          4  :        5 ;
assign      value_2[3] = ( value_1[6] >  value_1[7]) ?  value_1[6] :value_1[7];
assign max_number_2[3] = ( value_1[6] >  value_1[7]) ?          6  :        7 ;
assign      value_2[4] = ( value_1[8] >  value_1[9]) ?  value_1[8] :value_1[9];
assign max_number_2[4] = ( value_1[8] >  value_1[9]) ?          8  :        9 ;
assign      value_2[5] = (value_1[10] > value_1[11]) ? value_1[10] :value_1[11];
assign max_number_2[5] = (value_1[10] > value_1[11]) ?         10  :        11 ;
assign      value_2[6] = (value_1[12] > value_1[13]) ? value_1[12] :value_1[13];
assign max_number_2[6] = (value_1[12] > value_1[13]) ?         12  :        13 ;
assign      value_2[7] = (value_1[14] > value_1[15]) ? value_1[14] :value_1[15];
assign max_number_2[7] = (value_1[14] > value_1[15]) ?         14  :        15 ;         //second

assign      value_3[0] = (value_2[0] > value_2[1]) ?      value_2[0] :      value_2[1];
assign max_number_3[0] = (value_2[0] > value_2[1]) ? max_number_2[0] : max_number_2[1];
assign      value_3[1] = (value_2[2] > value_2[3]) ?      value_2[2] :      value_2[3];
assign max_number_3[1] = (value_2[2] > value_2[3]) ? max_number_2[2] : max_number_2[3];
assign      value_3[2] = (value_2[4] > value_2[5]) ?      value_2[4] :      value_2[5];
assign max_number_3[2] = (value_2[4] > value_2[5]) ? max_number_2[4] : max_number_2[5];
assign      value_3[3] = (value_2[6] > value_2[7]) ?      value_2[6] :      value_2[7];
assign max_number_3[3] = (value_2[6] > value_2[7]) ? max_number_2[6] : max_number_2[7];  //third

assign      value_4[0] = (value_3[0] > value_3[1]) ?      value_3[0] :      value_3[1];
assign max_number_4[0] = (value_3[0] > value_3[1]) ? max_number_3[0] : max_number_3[1];
assign      value_4[1] = (value_3[2] > value_3[3]) ?      value_3[2] :      value_3[3];
assign max_number_4[1] = (value_3[2] > value_3[3]) ? max_number_3[2] : max_number_3[3];  //fourth

assign      value_5 = (value_4[0] > value_4[1]) ?      value_4[0] :      value_4[1];
assign max_number_5 = (value_4[0] > value_4[1]) ? max_number_4[0] : max_number_4[1];     //five



reg signed [15:0]data_buf[15:0];    //store data
reg signed [63:0]x[15:0];           //calculate output

reg [63:0] a1,a2,a3,a4,a5,a6,a7,a8,b1,b2,b3,b4,b5,b6,b7,b8;
wire [63:0] fft_a1, fft_b1,fft_a2, fft_b2,fft_a3, fft_b3,fft_a4, fft_b4,fft_a5, fft_b5,fft_a6, fft_b6,fft_a7, fft_b7,fft_a8, fft_b8;
reg [3:0] number1,number2,number3,number4,number5,number6,number7,number8;

FFT_PE name1( a1, b1, fft_a1, fft_b1, number1);
FFT_PE name2( a2, b2, fft_a2, fft_b2, number2);
FFT_PE name3( a3, b3, fft_a3, fft_b3, number3);
FFT_PE name4( a4, b4, fft_a4, fft_b4, number4);
FFT_PE name5( a5, b5, fft_a5, fft_b5, number5);
FFT_PE name6( a6, b6, fft_a6, fft_b6, number6);
FFT_PE name7( a7, b7, fft_a7, fft_b7, number7);
FFT_PE name8( a8, b8, fft_a8, fft_b8, number8);

reg [3:0] stage;
reg [4:0] store_index; 

 always@( posedge clk , posedge rst)begin
     if(rst)begin 
         done <= 0;
         fft_valid <=0 ;
         store_index <=0;         
         stage <= 0;

    
     end
     else begin  
         done <= 0;
         fft_valid <=0 ;
         data_buf[store_index] <= data;
         store_index <= store_index + 1;
         if(store_index == 15)begin
             store_index <= 0;
              x[0] <= { data_buf[0],48'b0};
              x[1] <= { data_buf[1],48'b0};
              x[2] <= { data_buf[2],48'b0};
              x[3] <= { data_buf[3],48'b0};
              x[4] <= { data_buf[4],48'b0};
              x[5] <= { data_buf[5],48'b0};
              x[6] <= { data_buf[6],48'b0};
              x[7] <= { data_buf[7],48'b0};
              x[8] <= { data_buf[8],48'b0};
              x[9] <= { data_buf[9],48'b0};
             x[10] <= {data_buf[10],48'b0};
             x[11] <= {data_buf[11],48'b0};
             x[12] <= {data_buf[12],48'b0};
             x[13] <= {data_buf[13],48'b0};
             x[14] <= {data_buf[14],48'b0};
             x[15] <= {        data,48'b0};
             stage <= 1;
         end  
         else begin
             case(stage)
             4'd0: stage <= 0;
             4'd1:begin
                 a1 <= x[0];
                 b1 <= x[8];
                 number1 <= 0; 
                 a2 <=x[1];
                 b2 <=x[9];
                 number2 <= 1; 
                 a3 <=x[2];
                 b3 <=x[10];
                 number3 <= 2; 
                 a4 <=x[3];
                 b4 <=x[11];
                 number4 <=3; 
                 a5 <=x[4];
                 b5 <=x[12];
                 number5 <=4; 
                 a6 <=x[5];
                 b6 <=x[13];
                 number6 <=5; 
                 a7 <=x[6];
                 b7<=x[14];
                 number7 <=6; 
                 a8 <= x[7];
                 b8 <= x[15];
                 number8 <= 7;
      
                 stage <= 2;
             end   
             4'd2:begin
                 a1 <= fft_a1;
                 b1 <= fft_a5;
                 number1 <= 0;
 
                 a2 <= fft_a2;
                 b2 <= fft_a6;
                 number2 <= 2;
 
                 a3 <= fft_a3;
                 b3 <= fft_a7;
                 number3 <= 4;
 
                 a4 <= fft_a4;
                 b4 <= fft_a8;
                 number4 <=6; 

                 a5 <= fft_b1;
                 b5 <= fft_b5;
                 number5 <=0; 

                 a6 <= fft_b2;
                 b6 <= fft_b6;
                 number6 <=2; 

                 a7 <= fft_b3;
                 b7 <= fft_b7;
                 number7 <=4; 

                 a8 <= fft_b4;
                 b8 <= fft_b8;
                 number8 <= 6; 
              
                 stage <= 3;
             end  
             4'd3:begin
                 a1 <= fft_a1;
                 b1 <= fft_a3;
                 number1 <= 0;
 
                 a2 <= fft_a2;
                 b2 <= fft_a4;
                 number2 <= 4;
 
                 a3 <= fft_b1;
                 b3 <= fft_b3;
                 number3 <= 0;
 
                 a4 <= fft_b2;
                 b4 <= fft_b4;
                 number4 <=4; 

                 a5 <= fft_a5;
                 b5 <= fft_a7;
                 number5 <=0; 

                 a6 <= fft_a6;
                 b6 <= fft_a8;
                 number6 <=4; 

                 a7 <= fft_b5;
                 b7 <= fft_b7;
                 number7 <=0; 

                 a8 <= fft_b6;
                 b8 <= fft_b8;
                 number8 <= 4; 
                 stage <= 4;
             end  
             4'd4:begin
                 a1 <= fft_a1;
                 b1 <= fft_a2;
                 number1 <= 0;
 
                 a2 <= fft_b1;
                 b2 <= fft_b2;
                 number2 <= 0;
 
                 a3 <= fft_a3;
                 b3 <= fft_a4;
                 number3 <= 0;
 
                 a4 <= fft_b3;
                 b4 <= fft_b4;
                 number4 <=0; 

                 a5 <= fft_a5;
                 b5 <= fft_a6;
                 number5 <=0; 

                 a6 <= fft_b5;
                 b6 <= fft_b6;
                 number6 <=0; 

                 a7 <= fft_a7;
                 b7 <= fft_a8;
                 number7 <=0; 

                 a8 <= fft_b7;
                 b8 <= fft_b8;
                 number8 <= 0; 

                 stage <= 5;
             end       
             4'd5:begin  
                 stage <= 6;
          
                 fft_d0  <= {fft_a1[63:48],fft_a1[31:16]};
                 fft_d1  <= {fft_a5[63:48],fft_a5[31:16]};
                 fft_d2  <= {fft_a3[63:48],fft_a3[31:16]};
                 fft_d3  <= {fft_a7[63:48],fft_a7[31:16]};
                 fft_d4  <= {fft_a2[63:48],fft_a2[31:16]};
                 fft_d5  <= {fft_a6[63:48],fft_a6[31:16]};
                 fft_d6  <= {fft_a4[63:48],fft_a4[31:16]};
                 fft_d7  <= {fft_a8[63:48],fft_a8[31:16]};
                 fft_d8  <= {fft_b1[63:48],fft_b1[31:16]};
                 fft_d9  <= {fft_b5[63:48],fft_b5[31:16]};
                 fft_d10 <= {fft_b3[63:48],fft_b3[31:16]};
                 fft_d11 <= {fft_b7[63:48],fft_b7[31:16]};
                 fft_d12 <= {fft_b2[63:48],fft_b2[31:16]};
                 fft_d13 <= {fft_b6[63:48],fft_b6[31:16]};
                 fft_d14 <= {fft_b4[63:48],fft_b4[31:16]};
                 fft_d15 <= {fft_b8[63:48],fft_b8[31:16]};    //output data
                 end
             4'd6:begin
                  freq <=  max_number_5;
                  stage <= 0;
                  fft_valid <= 1;
                  done <= 1;
                   end 
             endcase   
         end   
     end // end else
end// end always
endmodule


module FFT_PE( a, b, fft_a, fft_b,  number); 		 
input signed [63:0] a, b;
input        [2 :0] number;
output       [63:0] fft_a, fft_b;

wire signed [47:0] w_real[7:0] ;
wire signed [47:0] w_image[7:0];     //coefficient table
assign   w_real[0] = 48'h000000010000;
assign   w_real[1] = 48'h00000000EC83;
assign   w_real[2] = 48'h00000000B504;
assign   w_real[3] = 48'h0000000061F7;
assign   w_real[4] = 48'h000000000000;
assign   w_real[5] = 48'hFFFFFFFF9E09;
assign   w_real[6] = 48'hFFFFFFFF4AFC;
assign   w_real[7] = 48'hFFFFFFFF137D;
    
assign   w_image[0] = 48'h000000000000;
assign   w_image[1] = 48'hFFFFFFFF9E09;
assign   w_image[2] = 48'hFFFFFFFF4AFC;
assign   w_image[3] = 48'hFFFFFFFF137D;
assign   w_image[4] = 48'hFFFFFFFF0000;
assign   w_image[5] = 48'hFFFFFFFF137D;
assign   w_image[6] = 48'hFFFFFFFF4AFC;
assign   w_image[7] = 48'hFFFFFFFF9E09;    // save table  

wire signed[47:0]wire1,wire2;
assign  wire1 = $signed(a[63:32]-b[63:32])* w_real[number]  + $signed( b[31:0] - a[31:0]) * w_image[number]; //real part
assign  wire2 = $signed(a[63:32]-b[63:32])* w_image[number] + $signed( a[31:0] - b[31:0]) * w_real[number] ; // image part

assign  fft_a[63:32] = a[63:32]+b[63:32];   // real part
assign  fft_a[31: 0] = a[31: 0]+b[31: 0];   // image part

assign fft_b[63:32] = wire1[47:16];    // real part
assign fft_b[31: 0] = wire2[47:16];    // image part
                   
endmodule
