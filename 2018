module LCD_CTRL(clk, reset, cmd, cmd_valid, IROM_Q, IROM_rd, IROM_A, IRAM_valid, IRAM_D, IRAM_A, busy, done);
input clk;
input reset;
input [3:0] cmd;
input cmd_valid;
input [7:0] IROM_Q;
output reg IROM_rd;
output reg [5:0] IROM_A;
output reg IRAM_valid;
output reg [7:0] IRAM_D;
output reg [5:0] IRAM_A;
output reg busy;
output reg done;

reg [7:0]data[63:0];
reg [6:0] out_index;
reg [6:0] store_index;
reg [7:0]temp_data[1:0];
reg [2:0] point[1:0];
reg  [9:0]avg;

wire [6:0]position;
assign position = point[0]+point[1]*8-9;

wire [7:0]max;
assign max =(temp_data[1] > temp_data[0])? temp_data[1] : temp_data[0];

wire [7:0]min;
assign min =(temp_data[1] < temp_data[0])? temp_data[1] : temp_data[0];


always@(posedge clk) begin
    if(reset) begin
       IROM_rd <= 1;
       IROM_A <= 0;
       IRAM_valid <= 0;
       IRAM_D <= 0;
       IRAM_A <= 0;
       busy <= 1;    // set 0 to get next instruction
       done <=0;     // set 1 to check out
    
       out_index <= 0;
       store_index <= 0;
       temp_data[0] <= 0;
       temp_data[1] <= 0;
       point[0] <= 4;    // X
       point[1] <= 4;    // Y
     end
    else if(IROM_rd == 1) begin
         data[IROM_A] <= IROM_Q;
         IROM_A <= IROM_A + 1;
         if(IROM_A == 63)begin
            IROM_rd <= 0;          // end 
            busy <= 0;
         end
    end
    else begin
         case (cmd)
              4'd0:begin
                   IRAM_valid <= 1;
                   busy <= 1;
                   IRAM_A <= out_index;
                   IRAM_D <= data[out_index]; 
                   out_index <= out_index +1;
                   if(out_index == 64) begin
                      busy <= 0;
                      IRAM_valid <= 0;
                      done<= 1;     //end write
                      end
                  end
             4'd1:begin     // shift up
                  if(point[1] > 1)   // Y-1
                     point[1] <= point[1] - 1;
                  end
             4'd2:begin     //shuft down
                  if(point[1] < 7)   // Y+1
                     point[1] <= point[1] + 1;
                  end
             4'd3:begin     //shift left
                  if(point[0] > 1)   // X-1
                     point[0] <= point[0] - 1;
                  end
             4'd4:begin     // shift right
                  if(point[0] < 7)   // X+1
                     point[0] <= point[0] + 1;
                  end 
             4'd5:begin     // max
                  if(busy ==0) begin
                     busy <=1;
                     if(data[0+position]>data[1+position])
                        temp_data[0] <=data[0+position];
                     else
                        temp_data[0] <=data[1+position];  
                   
                     if(data[8+position]>data[9+position])
                        temp_data[1] <=data[8+position];
                     else
                        temp_data[1] <=data[9+position];
                     end
                  else begin 
                     data[0+position] <= max;
                     data[1+position] <= max;
                     data[8+position] <= max;
                     data[9+position] <= max;    
                     busy <=0;
                    end 
                  end
             4'd6:begin     //min
                  if(busy == 0)begin
                     busy <= 1;
                     if(data[0+position]<data[1+position])
                        temp_data[0] <=data[0+position];
                     else
                        temp_data[0] <=data[1+position];  
                   
                     if(data[8+position]<data[9+position])
                        temp_data[1] <=data[8+position];
                     else
                        temp_data[1] <=data[9+position];
                 end
                 else begin  
                     data[0+position] <= min;
                     data[1+position] <= min;
                     data[8+position] <= min;
                     data[9+position] <= min;
                     busy <= 0;  
                     end
                 end 
            4'd7:begin     //average
                 if(busy == 0)begin
                    busy<=1;
                    avg<=(data[0+position]+data[1+position]+data[8+position]+data[9+position])/4;
                 end
                 else begin
                     data[0+position] <= avg;
                     data[1+position] <= avg;
                     data[8+position] <= avg;
                     data[9+position] <= avg;
                     busy <=0;
                   end   
                 end
            4'd8:begin     //counterclockwise rotate
                 data[0+position] <= data[1+position];
                 data[1+position] <= data[9+position];
                 data[8+position] <= data[0+position];
                 data[9+position] <= data[8+position];
                 end  
            4'd9:begin     //clockwise rotate
                 data[0+position] <= data[8+position];
                 data[1+position] <= data[0+position];
                 data[8+position] <= data[9+position];
                 data[9+position] <= data[1+position];
                 end    
           4'd10:begin     //mirror x
                 data[0+position] <= data[8+position];
                 data[1+position] <= data[9+position];
                 data[8+position] <= data[0+position];
                 data[9+position] <= data[1+position];
                 end 
           4'd11:begin     //mirror y
                 data[0+position] <= data[1+position];
                 data[1+position] <= data[0+position];
                 data[8+position] <= data[9+position];
                 data[9+position] <= data[8+position];
                 end                    
          endcase
      end  // end else 
    end // end always
endmodule
